# This rpmfusion__impl role is used to avoid duplicated code between the -free
# and -nonfree roles.  It simplifies maintenance and development.
#
# nonfree requires free to be enabled; the dependency is handled in the
# nonfree role.
#
# You could have a single role with a variable to control whether the nonfree
# repo is enabled.  However that method generates "a lot of ‘skipped’ output".
#
# I think the skipped output is possible to avoid using a loop - of an include
# task.  However "dynamic includes" seem to be quite magical beasts.  I
# actually tried but didn't manage to work it out :).  Also, "tasks which only
# exist inside a dynamic include will not show up in --list-tasks output".
# Remember `--check` mode is not a fully dry run, making it "less useful ...
# if you have steps that use conditionals that depend on the results of prior
# commands".  You can find an example of that in the tasks below.

- name: Check variable <repo> - "free" or "nonfree"
  assert:
    that:
      - repo is defined
      - repo == "free" or repo == "nonfree"
    msg: Did you use rpmfusion__impl directly?
         Please use sourcejedi.rpmfusion-free and/or
         sourcejedi.rpmfusion-nonfree instead.

# The role which pulled us in won't be shown, not yet.
# Clarify which one it was.
- name: Now installing <repo>
  debug:
    var: repo

- name: Check OS is Fedora
  assert:
    that: ansible_distribution == 'Fedora'

# Signing keys: https://rpmfusion.org/keys
#
# Notice RPMFusion supports secure upgrades between versions of Fedora.
# It will be possible to update this role's copy of the keys accordingly.
# Equally, if you already installed RPMFusion you could cross-check the keys.
#
- name: Copy signing keys
  copy:
    src: "{{ item }}"
    dest: /ansible-managed/rpmfusion/
  with_items:
    - rpm-gpg
    - fingerprints

# Ansible copy module does not preserve executable bit (unlike `cp`).
#
- name: Copy script for checking key fingerprints
  copy:
    src: "{{ item }}"
    dest: /ansible-managed/rpmfusion/
    mode: a+x
  with_items:
    - keyfile_to_fingerprints.sh

- name: Install gpg
  package: name=gpg state=present

# This role also includes fingerprints of the keys.
#
- name: Our key file matches our list of fingerprints
  shell: VER={{ ansible_distribution_major_version | quote }};
         KEY=RPM-GPG-KEY-rpmfusion-{{ repo }}-fedora-"$VER";
         ./keyfile_to_fingerprints.sh rpm-gpg/"$KEY" |
         diff -u fingerprints/"$KEY" /dev/stdin
  args:
    chdir: /ansible-managed/rpmfusion/
  changed_when: False
  check_mode: False

- name: Import signing key
  rpm_key:
    key: /ansible-managed/rpmfusion/rpm-gpg/RPM-GPG-KEY-rpmfusion-{{ repo }}-fedora-{{ ansible_distribution_major_version }}
    state: present

  # On F25, import succeeds but is considered failed due to noisy rpm bug.
  # https://bugzilla.redhat.com/show_bug.cgi?id=1398272#c3
  register: import_key
  until: not import_key|failed
  retries: 1
  delay: 0

- name: Download rpmfusion release RPM
  get_url:
    url: "https://download1.rpmfusion.org/{{ repo }}/fedora/rpmfusion-{{ repo }}-release-{{ ansible_distribution_major_version }}.noarch.rpm"
    dest: /ansible-managed/rpmfusion/

- name: Verify rpmfusion release RPM
  command: rpm --checksig rpmfusion-{{ repo }}-release-{{ ansible_distribution_major_version }}.noarch.rpm
  args:
    chdir: /ansible-managed/rpmfusion/
    warn: no  # can't use ansible dnf module, it does not implement this
  changed_when: False
  check_mode: False

- name: Install rpmfusion release RPM
  package:
    name: /ansible-managed/rpmfusion/rpmfusion-{{ repo }}-release-{{ ansible_distribution_major_version }}.noarch.rpm
    state: present
  register: install

# This test may be slow, only bother when changed.
# (In which case, the next use of dnf would probably have had to do this anyway).
- name: Test "dnf check-update"
  when: install.changed or import_key.changed
  command: dnf \
           --disablerepo="*" --enablerepo=rpmfusion-{{ repo }}
           check-update
  register: dnf_check_update
  # exit status is 0 on success, 100 if updates available (otherwise 100)
  failed_when: dnf_check_update.rc not in [0, 100]
  args:
    warn: no  # can't use ansible dnf module, it does not implement this
